import .java.io.*;
import java.net.*;
import java.util.*;
import java.awt.*;
import javax.swing.*;

public class Server extends JFrame{
	private JTextArea textArea = new JTextArea();
	private Vextor<String>wordVector = new Vector<String>();
	public Server() {
		super("영어 스펠 체크 서버");
		setDefaulCloseOperation(JFrame.EXIT_ON_CLOSE);
		Container c = getContentPane();
		c.add(textArea);
		textArea.setEnabled(false);
		this.loadWord("words.txt");
		new ServerThread().start();
		
	    setSize(500, 500);
	    setVisible(true);
	}
	public void loadWord(Sting fileName) {
		FilelnputStream FilelnputStream = null;
		BufferedReader in = null;
		String words;
	    try {
	    	filelnputStream = new FilelnputStream(FileName);
	    	in = new BufferedReader(new lnputStreamReader(FilelnputStream));
	    	while((words = in.readLine()) != null) {
	    		wordVector .add(words);
	    		System.out.println(words);	
	    	}
	    	textArea.append(FileName + "읽기 완료\n");\
	    }catch (Exception e) {
	    	e.printStackTrace();
	    }
	}
	
	class ServerThread ewpends Thread{
		@Override
		public void run() {
			ServerSocket listener = null;
			Socket socket = null;
			try {
				listener = new ServerSocket(9999);
				while (true) {
					socket = listner.accept();
					textArea.append("클라이언트 연결됨\n");
					new ServiceThread(socket).start();					
				}
				
			}catch (Exception e) {
				e.printStackTrace();				
			}
		
			try {
				if(listener != null) listener .close();
				if(socket != null) listener .close();
			}catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
	
	class ServiceThread extends Thread{
		private BufferedReader in = null;
		private BifferedWriter out = null;
		private Socket socket;
		public ServiceThread(Socket socket) {
			this.socket = socket;
			try {
				in = new BufferedReader(new lnputStreamReader(socket .getlnputStream()));
				out = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));			
			}catch(Exception e) {
				e.printStackTrace();
			}
		}
		@override
		public void run() {
			String inputMessage, outputMessage;
			while(true) {
				try {
					inputMessage = in.readLine();
					if(wordvector.contains(inputMessage)) {
						outputMessage = "YES";						
					}
					else {
						outputMessage = "NO";			
					}
				    textArea.append(inputMessage + "=" + outputMessage+"\n");
				    out.write(outputMessage + "\n");
				    out.flush();
			}catch (Exception e) {
				e.printStackTrace();
				textArea.append("연결종료\n");
				return;
			}				
		}
	}
	public static void main(Sting[] args) {
		new Server();
	}
}
	
import java.io.*;
import java.net.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class Client expends JFrame{
	private JLabel label = new JLabel("단어 입력")
	private JTextField textField = new JTextField(10);
	private Jlabel resultLabel = new JLabel();
	private BufferReader in = null;
	private BufferWritere out = null;
	public Client() {
		super("스펠체크 클라이언트");
	    setDefaultCloseOperaion(JFrame.EXIT_ON_CLOSE);
	    
	    Container c = getContentPane();
	    c.setLayout(new FlowLayout());
	    c.add(label);
	    c.add(textField);
	    c.add(resultLabel);
	    textField.addActionListener(new ActionListener() {
	    	@override
	    	public void actionperformed(ActionEvent e) {
	    		JTextField t = (JTextField)e.getSource();
	    		try {
	    			out.write(t.getText()+"\n");
	    			out.flush();
	    			resultLabel.setText(t.getText());
	    			t.setText("");
	    		}catch (Exception x) {
	    			x.printStackTrace();
	    		}
	    	}
	    });
	    setSize(400, 100);
	    setVisible(true);
	    this.play();	    	        
	}
	public void play() {
		try {
			socket = new socket("localhost", 9999);
			in = new BufferedReader(new lnputStreamReader(socketgetlnputStream()));
			out = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream());
			while(true) {
				String inputMessage = in.readLine();
				resultLabel.setText(resultLabel.getText()="는+inputMessage);"
			}			
		}catch (Exception e) {
			e.printStackTrace();			
		}finally {
			try {
				if(socket != null)socket.close();				
			}catch(Exception e) {
				e.printStackTrace();				
			}
		}			
	}
	
	public static void main(String[] args) {
        new Client();
	}
}
